#!/usr/bin/env bash

# Drop table T on remote host as per Unix 'rm' command.
#
# Examples:
#
# 1   ./dbrm sshUser@remoteMachine mySQLUsrNameAtRemote myDb myTbl
# 2   ./dbrm sshUser@remoteMachine mySQLUsrNameAtRemote myDb myTbl1 myTbl2
#
# 1:   o If myDb.myTbl exists at the remote DB, it is dropped. Else
#        nothing happens, and 
#           dbrm: myDb: No such database; nothing done.
#        or:
#           dbrm: myTbl: No such table
#        is written to the console.
#
# 2:   o All tables are dropped. With the -v
#        option, removal of each is announced.
#        With the -i option, confirmation is
#        solicited before each drop.
#
# Prerequisites:
#   o Must have --login-path set up for the specified remote MySQL user.
#   o Given user must have privileges to DROP, CREATE, INSERT


CURR_DIR=$(dirname $0)
source ${CURR_DIR}/db_series_helper.sh

read -r -d '' USAGE <<EOF
Usage: $(basename $0) [-h|--help] [-v|--verbose] [-i|--interactive] sshUser@remoteMachine remMySQLUser remDb remTbl [remTbl [remTbl]]
EOF

# Running on Macos?

if [ "$(uname)" == "Darwin" ]
then
    if [[ ! -e /usr/local/Cellar/gnu-getopt/1.1.6/bin/getopt ]]
    then
        echoerr "Getopt program on Mac is incompatible. Do: 'brew install gnu-getopt' and try again."
        exit 1
    fi
    getopt="/usr/local/Cellar/gnu-getopt/1.1.6/bin/getopt"
else
    getopt=$(which getopt)
fi

#echo "getopt: $getopt"

OPTS=$(${getopt} --options hvi --long help,verbose,interactive -- "$@")

if [ $? != 0 ]
then 
   echoerr "Failed parsing options; ${USAGE}"
   exit 1
fi

eval set -- $OPTS

VERBOSE=0
INTERACTIVE=0

while true; do
  case "$1" in
    -v | --verbose ) VERBOSE=1; shift;;
    -i | --interactive ) INTERACTIVE=1; shift;;
    -h | --help ) echo $USAGE; exit 0 ;;
    -- ) shift; 
	 break ;;
    * ) echoerr "Could not assign options." ; 
	exit 1 ;;
  esac
done

if [[ $# < 4 ]]
then
    echoerr "Too few arguments. ${USAGE}"
    exit 1
fi

SSH_DEST=$1
REM_MYSQL_USER=$2
REM_DB=$3
shift; shift; shift
REM_TBLS=$@

# Get remote hostname from the SSH_DEST,
# which is user@rem_machine. I.e., grab all after
# the '@' sign:
REM_MACHINE=$(echo "facdec@localhost" | sed -rn "s/[^@]*@(.*$)/\1/p")

# Check whether can ssh to remote source
# without pwd:
LOCAL_USER=$(whoami)
# Just ssh, and execute simple
# command at remote machine. BatchMode=yes
# causes failure immediately if no ssh possible:
ssh -oBatchMode=yes ${SSH_DEST}  'whoami' 2>&1>/dev/null
if [[ $? > 0 ]]
then
    echo "If asked for pwd, use ${LOCAL_USER}'s pwd at ${SSH_DEST}."
fi

#**********
# echo "SSH_DEST: '$SSH_DEST'"
# echo "REM_MYSQL_USER: '$REM_MYSQL_USER'"
# echo "REM_DB: '$REM_DB'"
# echo "REM_TBLS: '$REM_TBLS'"
# exit
#**********

#----------------------------- DB Existence Check --------------------------

REM_DB_EXISTS=$(rem_db_exists $SSH_DEST $REM_MYSQL_USER $REM_DB)

if [[ ${REM_DB_EXISTS} -eq 0 ]]
then
   echoerr "dbrm: ${REM_DB}: No such database on machine ${REM_MACHINE}; nothing done."
   exit 1
fi

#--------- Do the Drops one at a time --------------

for TBL in ${REM_TBLS}
do
    # Ensure that table exists

    TBL_EXISTS=$(rem_tbl_exists $SSH_DEST $REM_MYSQL_USER $REM_DB ${TBL})

    if [[ ${TBL_EXISTS} -eq 0 ]]
    then
        echowarn "dbrm: ${REM_DB}.${TBL} on ${SSH_DEST}: No such table. Skipping."
        continue
    fi

    # If requested, ask whether to remove this table:
    DO_IT=1

    if [[ ${INTERACTIVE} == 1 ]]
    then
        read -p "Drop table ${TBL}[yN]? " -n 1 -r
        # If user entered a letter, add a newline:
        if [[ ${REPLY} != '' ]]
        then
            echo
        fi

        if [[ $REPLY =~ ^[yN]$ ]]
        then
            # Explicit Yes:
            DO_IT=1
        else
            DO_IT=0
            echo "Skipping table ${TBL}"
        fi
    fi

    # If user answered 'n', or just ENTER,
    # then skip this table:

    if [[ ${DO_IT} != 1 ]]
    then        
        continue
    fi

    if [[ ${VERBOSE} -ne 0 ]]
    then
        echo "Dropping table ${TBL} on ${REM_MACHINE}..."
    fi

    RES=$(rem_mysql_cmd $SSH_DEST $REM_MYSQL_USER "DROP TABLE ${REM_DB}.${TBL}")
    
    if [[ $? != 0 ]]
    then
       echoerr "MySQL error while dropping '${TBL}'. Quitting"
       exit 1
    fi

    if [[ ${VERBOSE} -ne 0 ]]
    then
        echo "Done dropping ${TBL}."
    fi
done
